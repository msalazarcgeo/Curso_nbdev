{
  "hash": "659aa44f11ff6b6db0754b073c8f7f48",
  "result": {
    "markdown": "---\nsubtitle: \"Instalación -- Curso nbdev\"\ntitle: \"<font style='font-size:1em;'>Curso Nbdev<br/>Introducción </font>\"\nauthor:   '[J. Miguel Salazar](#)'\ninstitute: '[CentroGeo](#)'\ndate: 01 Enero 2024\ndate-meta: 01 Enero 2024\ndate-format: \"DD MMM YYYY\"\ntoc: true\ntoc-depth: 1\ntoc-title: \"Contenido del curso:\"\ncenter-title-slide: false\nfrom: markdown+emoji\n\n---\n\n## Instalación \n\nPara hacer uso de _nbdev_ es necesario los siguientes softwares:\n\n\n* Python (Python o [conda](https://www.anaconda.com/))\n* Jupyter Notebooks\n* Quarto\n* Github\n* nbdev\n\n\n## Instalación Anaconda (conda)\n\nAnaconda es una empresa la cual desarrollo un manejador de ambientes virtuales con un manejador de paquetes (conda), éste nos permite la creación de ambientes virtuales. Dentro de  dichos ambientes se puede hacer un manejo eficiente de los diferentes softwares instalados dentro del ambiente virtual y las dependencias de los mismos. Al tener un manejo eficiente de las paqueterias y las dependencias dentro de este se hace más fácil la creación de ambientes de desarrollo. \n\nDe esta forma algo instalado dentro de un ambiente virtual no afectara a las distintas paqueterias que se encuentran fuera del ambiente virtual. Lo cual nos permite tener tener aislado un ambiente de desarrollo con respecto al sistema operativo u otro ambiente de desarrollo. \n\nPara la instalación de conda lo más sencillo es seguir el este [manual](https://docs.conda.io/projects/conda/en/latest/user-guide/install/windows.html) aquí sólo se hace un esbozo de la instalación.\n\n1. Bajar el instalador:\n    * [Anaconda](https://www.anaconda.com/download/) para windows.\n\n2. Verificar que se ha bajano correctamente ([ver](https://docs.conda.io/projects/conda/en/latest/user-guide/install/download.html#hash-verification) ).\n\n3.  Hacer doble click en el archivo `.exe` (similar a `Anaconda3-######-Windows-x86_64.exe`). Para la instalación en Linux o Mac se debe de bajar el archivo `Anaconda3-####-Linux-###.sh` o bien el `Anaconda3-####-MACOSX-###.sh` y ejecutar el archivo  usando la terminal. \n\n\n4. Seguir las instrucciones en la pantalla en caso de windows. Y seguir la instrucciones que apareceran en caso del uso de la terminal. \n\n5. Para probar la instalación abra la terminal de windows (cmd) o el anaconda prompt y corra el comando `conda list`. Una lista de paquetes aparecera si se instaló de forma correcta. \n\n\n### Hacer un ambiente virtual \n\nPara generar un ambiente virtual usando anaconda se puede hacer a través de la terminal. En caso de windows se puede hacer llamando a **Anaconda Prompt**. \n\nDentro de la terminal se puede observar que antes del símbolo del sistema aparece la leyenda `(base)` esta no indica que estamos usando el ambiente virtual base. \n\nPara crear un nuevo ambiente virtual se ejecuta la siguiente linea en la linea de comandos. \n\n\n```{bash}\nconda create -n desarrollo\n```\n\nEste comando crea un nuevo ambiente virtual llamano desarrollo. Se puede especificar la versión de python a instalar dentro del ambiente virtual. También es posible instalar otros lenguajes de programación dentro del ambiente virtual cono son R o Julia. \n\n\nPara entrar al ambiente virtual la forma de hacerlo es ejecutar \n```\nconda activate desarrollo\n```\nAl ejecutar el comando se puede observar que la leyenda `(base)` fue sustituida por la leyenda `(desarrollo)` lo cual nos indica que hemos activado nuestro ambiente virtual. \n\n### Canales \n\nDentro de nuestro ambiente virtual podemos instalar las distintas bibliotecas y paquetes que sean necesarios. Por defecto Anaconda tiene un canal para poner a la disposición de la comunidad, que utiliza conda, muchos paquetes. Anaconda es la encargada de verificar que el el desarrollo de dichos paquetes sean de acuerdo a las mismas reglas establecidas por Anaconda. De la misma forma hay distintos canales los cuales tiene paquetes que estan de acuerdo a las reglas establecidas por cada canal. Los distintos canales tienen distintos objetivos por ejemplo [bioconda](https://bioconda.github.io/) contiene las paqueterias desarrolladas relacionadas con desarrollos biomédicos. \n\nOtro canal muy utilizado es [conda-forge](https://conda-forge.org/), el cual contiene paquetes desarrollados por una extensa comunidad. Por facilidad en este curso utilizaremos el canal conda-forge pues tiene la mayoria de las paqueterias necesarias y se encuentran muchas versiones de los mismos.  \n\n\n\n### Instalación paquetes\n\nPara instalar un paquete dentro del ambiente virtual es necesario activar el ambiente. Ya dentro de este para hacer la instalación de los distintos paquetes de python tenemos dos formas distintas **PIP** o **conda**. PIP es el manejador de paquetes usado por python por defecto si se a trabajado anteriormente con Python lo más seguro es estar familiarizado con su uso. \n\n**conda** es el manejador de paquetes del ambiente virtual y nos permite tanto hacer instalar paquetería de python y otras. Por ejemplo podemos instalar R o Julia haciendo uso de conda. \n\n\nComo ejemplo para instalar numpy usando conda y el canal conda-forge executamos \n\n\n```{bash}\n(desarrollo) $ conda install -c conda-forge numpy\n```\n\n\n\n\n\n## Instalar git\n\nGit es un systema de control de versiones, aunque existen distintos sistemas de control de versiones git es el más utilizado. Los sistemas de control de versiones son una herramienta fundamental en el desarrollo de software y se recomienda tener una mejor comprensión de los mismos. Por desgracia esto queda fuera del campo de este curso y sólo daremos una explicación simplificada de esto. \n\nLos sistemas de control de versiones fueron ideados para poder regresar a una versión anterior en el desarrollo de software, lo cual resulta fundamental si hay un error en el desarrollo (bug). Con el paso del tiempo y con el aumento en el tamaño de los equipos de desarrollo, también sirven como herramientas en la integración entre los distintos desarrolladores. \n\nExisten distintos servicios para almacenar código de manera remota dentro de los cuales podemos destacar [github](https://github.com/) y [gitlab](http://gitlab.com/). En este curso se utiliza github por facilidad pues se usa su servicio de *github-pages* para tener en linea la documentación del paquete que se desarrolla.\n\nPara la instalación de git dentro de un ambiente virtual de anaconda se puede hacer de la siguiente forma  \n\n\n```{bash}\n(desarrollo) conda install -c conda-forge git\n```\n\n\n\n\n## Instalar Jupyter Notebook \n\nLa instalación de Jupyter para h\n\n```\nconda install -c conda-forge -y jupyterlab\n```\nO con pip\n\n```\npip install jupyterlab\n```\n\n\n## Instalación rápida (linux o Mac)\n\nSe puede instalar a través de pip usando:\n\n```\npip install nbdev\n```\n\no instalar con conda:\n\n```\nconda install -c fastai nbdev\n```\n\n## Instalación no tan rápida (windows)\n\nLa instalaciónen Windows es distinta \n\n\n### Instalar Quarto \n\nYa con la instalación de nbdev un comando del mismo nos permite instalar Quarto\n\n```\nnbdev_install_quarto\n```\n\nSi se desea se puede instalar siguiendo los siguientes [pasos](https://quarto.org/docs/get-started/) para usar con el IDE de preferencia. \n\n",
    "supporting": [
      "slides_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}