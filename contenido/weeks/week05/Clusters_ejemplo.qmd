---
title: "Curso Nbdev -- Módulo con Clusters"
subtitle: "Hacer todo el desarrollo"
---

# Ejemplo

Un uso común en el mundo de los datos es el uso de algoritmos de agrupamiento o clusterización. A continuación vamos a tomar distintos algoritmos de clusterización y vamos a ponerlos todos dentro de un módulo. Este simple ejemplo aunque sencillo nos mostrará de forma más extensa el uso de nbdev. 


Primero generamos nuestro repositorio como lo hicimos en el ejemplo [anterior](../week03/1_pasos.qmd#generar-un-repositorio). 

Una vez con nuestro repositorio podemos iniciar nuestro repositorio de forma local y vamos a modificarlo para hacer el módulo de ejemplo.

## Entendiendo un poco más 

En la [sección anterior](../week03/1_pasos.qmd#generar-un-modulo) vimos como construir un ejemplo básico, en este vamos a generar un módulo que tenga una biblioteca simple donde contenga ejemplos básicos de clusterizar.

Entendamos la estructura que utiliza nbdev para generar nuestra nueva biblioteca, en el directorio `nbs` se encuentran los notebooks que vamos a modificar en nuestro ejemplo. al momento de creacion del repositorio una vez ejecutado el comando `nbdev_new` nos genera toda la estructura dentro de nuestro repositorio. 

Si no se hizo de la misma forma que como se describio anteriormente, esto se puede hacer de forma manual, se ejecuta el mismo comando y se rellenan los campos solicitados

```bash
> nbdev_new
```

![Salida nbdev_new](./nbdev_new_out.png){#fig-1-W5-nbdev_new_manual}

En el archivo `settings.ini` podemos ver las configuraciones, como ejemplo podemos ver que el archivo recien creado en el repositorio muestra los valores que se insertaron. 

![contenido de settings.ini](./set_ini_new.png){#fig-2-W5-settings_ini}

En este archivo se puede modificar cosas como la licencia, la url de la documentación, donde se aloja la documentación, el autor, el nombre de la biblioteca, el path de donde se localizan los notebooks, etc. 

Como ya hemos visto para modificar algo en nuestra biblioteca es necesario hacerlo en los notebooks, con este proposito, nbdev generará los archivos correspondientes tanto de la documentación, como los archivos con código que corresponden a nuestra biblioteca. 

También nbdev generará el archivo `README.md` el cual sirve como portada en nuestro repositorio. Para hace modificaciones a este se hacen desde el archivo `nbs/index.ipynb` el cual nos permitirá una vez terminada nuestra biblioteca dar instrucciones simples para su instalación así como la posibilidad de añadir links a la documentación de nuestra biblioteca. Se puede generar únicamente el archivo `README.md` ejecutando el comando `nbdev_readme`, una vez ejecutado se puede abrir el archivo y ver las modificaciones. 

```
nbdev_readme
```

Si se desea ver desde github sera necesario actualizar los cambios en el repositorio, para esto haremos un ejemplo desde la terminal sólo se muestra como ejemplo pues un curso completo de git queda fuera de los temas de este curso. 

```
git add README.md
git commit -c "Se modifica el README"
git push
```

* `git add README.md` añade el archivo que se modifico y que se desea que actualizar, o bien añadir el archivo si no se tiene dentro de nuesto conjunto de archivos vigilados. 

* `git commit -c "Se modifica el README"` se "comitea" es decir se añade a un registro de cambios de forma local los cambios hechos. `-c` es para añadir el comentario  `"Se modifica el README"` a los cambios hechos, esto nos sirve como guía para ver que cambios se han hecho y cual fue la razon de nuestros cambios. Esto es muy útil cuando se busca errores en el desarrollo y poder regresar al estado anterior.  

* `git push` Sube los cambios hechos a el servidor de git, en nuestro caso lo va a subir a github pues el es servicio que determinamos usar. 



Podemos ver las modificaciones en nuestro repositorio. 

## Otros comandos git 

Otros comandos importantes de git

* `git clone` sirve poara clonar repositorios
* `git pull` sirve para traer los cambios desde el servidor de git. El servidor depende de donde se tiene el servicio (github, gitlab o similares).
* `git config` configura distintos valores de el repositorio.
*  `git config –global user.name “Tu nombre” ` Cambia el valor de nombre de usuario de forma global.
* `git config –global user.email “tumail@example.com”` 	Cambia el valor global del mail. 
* `git init` Crea un nuevo repositorio. 
* `git commit -a` "Comitea" todos los archivos añadidos anteriormente al repositorio. 
* `git status` Enlista los archivos que se han cambiado dentro y aquellos que todavia se necesitan añadir o "comitear".
* `git checkout -b <nombre_rama>` crea una nueva rama en el repositorio. 
* `git checkout <nombre_rama>`cambia a la rama <nombre_rama>. 
* `git branch` Enlista todas las ramas en el repositorio y en que rama te encuentras actualmente. 
* `git branch -d <nombre_rama>` Borra la rama <nombre_rama>.
 

# Regresar al ejemplo

Ya comprendimos un poco más como es la estructura que genera nbdev, ahora vamos hacer un ejemplo y para generar nuevos módulos y como se hace el manejo de las dependencias y otras herramientas que estan disponibles en nbdev. 


Dentro del directorio `nbs` se encuentra el archivo `00_core.ipynb` cambiemos el nombre de dicho archivo a `00_cluster.ipynb`. Podemos abrir el archivo y como lo hicimos anteriormente nos sirve para hace la bibloteca. 

En la primera linea de código podemos observar que se tiene una directriz 
`default_exp` la cual nos sirve para determinar a que modulo se exportaran lo que se genere dentro del notebook. Lo modificamos para que el modulo a exportar se llame `cluster_ejemplo`.
```python
#| default_exp cluster_ejemplo
```

Podemos eliminar todas las demás celdas exepto la última. Esta última celda es la que genera el modulo. 

```python
#| hide
import nbdev; nbdev.nbdev_export()
```
Vamos a modificar las cosas para hacer nuestra biblioteca. Añadimos el siguiente contenido a la celda. 

```python
#| hide
#| export
from nbdev.showdoc import *
import sklearn
import random 
import numpy as np
import shapely
```
La directriz `#| hide` esconde la celda, es especialmente útil para hacer la documentación  mientras que la directriz `#| export` va a exportar a nuestro módulo lo que se encuentre en esta celda. 


Añadimos un objeto para generar datos de forma aleatoria 

```python
#| export
class data_points:
    """Una clase que contiene a los datos"""
    def __init__(self, n, min_x = 0, min_y = 0, max_x= 1, max_y=1, seed= None):
        if seed != None:
            random.seed(seed)
        
        self.Points = np.random.uniform(low= min_x, high= max_x, size=(n, 2));
        self.Points =  [shapely.Point(x[0],x[1]) for x in self.Points]

    
    def get_points(self):
        """Una funcion que para obtener los puntos"""
        return self.Points

    def get_Multypoint(self):
        """Regresa un objeto MultiPoint con los puntos"""
        return shapely.geometry.MultiPoint(self.Points)
    
    def get_X(self):
        """Regresa las coordenadas X"""
        return [x.x for x in self.Points]

    def get_Y(self):
        """Regresa las coordenadas X"""
        return [x.x for x in self.Points]

    def centroid(self):
        """Regresa el centroide de los puntos """
        return shapely.centroid(self.get_Multypoint())
```
Esta es una clase simple que nos sirve de ejemplo para ver algunas de las funcionalidades de nbdev. Cuando se contruye la documentación de forma automática nos genera una documentación simple como se muestra en la imagen @fig-3-W5-nbdev_docu.


![Ejemplo de documentacion](./docu_ejemplo_01.png){#fig-3-W5-nbdev_docu}

Todavía no vamos a hacer la documentación, antes de hacerlo vamos a añadir ciertas cosas. Se añaden las siguientes celdas como se puede observar ninguna de las celdas define nada nuevo simplemente se inicialica el objeto y se hace uso de sus métodos internos. 

```python
#| hide
datos_simples = data_points(40)
```

```python
datos_simples.get_points()
```

```python
datos_simples.get_points()
```

```python
datos_simples.get_Multypoint()
```

```python
datos_simples.get_X()
```

```python
datos_simples.get_Y()
```

Todas estas celdas nos serviran para que hacer pruebas y comprobar las funcionalidades, en este caso estamos probando que los métodos funcionen de forma correcta. 

Incluso se pueden hacer pruebas más complicadas, tomemos como ejemplo el código de la siguientes celda.

```python
if len(datos_simples.get_X()) != len(datos_simples.get_Y()):
    raise Exception("Si hay problema la evaluacion ")
```
Este código generara un error si el número de elementos fuesen distintos, es claro que la clase como se tiene siempre pasara esta prueba. Las pruebas tienen que ser pensadas para que la idea las pasen sin importar como se hizo la implementación, como es el caso de la prueba anterior. Dentro del desarrollo podriamos cambiar la forma en la cual se generan los puntos y almacenar estos como si fueran dos lista, donde cada lista almacena los datos de cada coordenada, esto dependería de cada desarrollador. Si se tiene un error en la generación de estas lista, como puede ser simplemente generar la lista pero no llenarla con datos, el tamaño seria distinto y no pasaria la prueba. Para ver si el código dentro de los notebooks que generan de nuestros módulos pasan las pruebas se ejecuta  la linea de comandos `nbdev_test`. 

```bash
nbdev_test
```
lo cual mostra 
![Exito pruebas](./Succes.png){#fig-4-W5-nbdev_test} de

## Clase clusters 

Vamos añadir una nueva clase a nuestro módulo, la cual llamaremos `Clusters`, esta clase nos sirve para generar clusters usando distintos algoritmos. 


```python
class Clusters:
    """Clase para generar los clusters a partir del conjunto de datos"""
    
    def __init__(self, data_points_i, seed=1234):
        if seed != None:
            random.seed(seed)
        
        self.data_structure =  data_points_i

    def KMeans(self, **kwargs):
        """Use Kmeans to obtain the clusters"""
        kmeans_c = KMeans(**kwargs)
        classes_val = kmeans_c.fit_predict(self.data_structure.as_array())
        self.data_structure.classes_Kmeans = classes_val
        if 'ret_model' in kwargs and kwargs['ret_model']==True :
            return  kmeans_c
        

    def DBSCAN(self, **kwargs):
        """Use DBSCAN to obtain clusters"""
        db = DBSCAN(**kwargs).fit(self.data_structure.as_array())
        self.data_structure.classes_DBSCAN = db.labels_
        if 'ret_model' in kwargs and kwargs['ret_model']==True :
            return  db
    
    
    def HDBSCAN(self, **kwargs):
        """Use HDBSCAN to obtain the clusters"""
        hdb = HDBSCAN(**kwargs).fit(self.data_structure.as_array())
        self.data_structure.classes_HDBSCAN = hdb.labels_
        if 'ret_model' in kwargs and kwargs['ret_model']==True : 
            return  hdb
        

    def OPTICS(self, **kwargs):
        optics=  OPTICS(**kwargs).fit(self.data_structure.as_array())
        self.data_structure.classes_OPTICS = optics.labels_
        
        if 'ret_model' in kwargs and kwargs['ret_model']==True :
            return  optics
        
```

Para exportar la clase al módulo es necesario añadir la directriz `#| export` al inicio de la celda. Adicionalmente añadimos pruebas simples usando los datos que ya se generaron. 

```python
cluster_all  = Clusters(datos_simples)
```

```python
cluster_all.DBSCAN()
```

```python
cluster_all.KMeans()
```

```python
cluster_all.HDBSCAN()
```

```python
cluster_all.OPTICS()
```
Como estas celdas nos sirven de pruebas vamos a añadir la directriz `#| hide` para evitar que estas sean parte de la documentación. Ahora podemos añadir ejemplos del uso de  añadir como se usan 
